{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Elta\\\\Desktop\\\\ramp-fe-challenge\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\n// App.tsx\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isEmployeeLoading, setIsEmployeeLoading] = useState(false); // Combine paginated and filtered transactions appropriately\n\n  const transactions = useMemo(() => {\n    var _paginatedTransaction;\n\n    if (transactionsByEmployee !== null) {\n      return transactionsByEmployee;\n    }\n\n    return (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : null;\n  }, [paginatedTransactions, transactionsByEmployee]); // Improved loadAllTransactions function\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n\n    try {\n      // Invalidate transactions filtered by employee to ensure fresh data\n      transactionsByEmployeeUtils.invalidateData(); // Fetch all employees if they haven't been loaded yet\n\n      if (employees === null && !employeeUtils.loading) {\n        await employeeUtils.fetchAll();\n      } // Fetch all paginated transactions\n\n\n      await paginatedTransactionsUtils.fetchAll();\n    } catch (error) {\n      console.error(\"Error loading all transactions:\", error); // Optionally, set an error state here to display an error message to users\n      // setError(\"Failed to load transactions. Please try again.\")\n    } finally {\n      setIsLoading(false);\n    }\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils, employees]); // Improved setTransactionApproval function\n\n  const setTransactionApproval = useCallback(async _ref => {\n    let {\n      transactionId,\n      newValue\n    } = _ref;\n\n    try {\n      // Optimistically update the transaction in local state\n      if (transactions) {\n        const updatedTransactions = transactions.map(transaction => transaction.id === transactionId ? { ...transaction,\n          approved: newValue\n        } : transaction); // Update the state depending on whether we're viewing all transactions or filtered by employee\n\n        if (transactionsByEmployee !== null) {\n          transactionsByEmployeeUtils.setData(updatedTransactions);\n        } else {\n          paginatedTransactionsUtils.setData(updatedTransactions);\n        }\n      } // Perform the simulated API call\n\n\n      await fetchWithoutCache(\"setTransactionApproval\", {\n        transactionId,\n        value: newValue\n      });\n    } catch (error) {\n      console.error(\"Error setting transaction approval:\", error); // Optionally, revert the optimistic update or notify the user of the failure\n    }\n  }, [transactions, transactionsByEmployee, transactionsByEmployeeUtils, paginatedTransactionsUtils, fetchWithoutCache]); // Function to load transactions filtered by a specific employee\n\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    setIsEmployeeLoading(true);\n\n    try {\n      // If 'All Employees' is selected, load all transactions\n      if (employeeId === EMPTY_EMPLOYEE.id) {\n        // Reset paginated transactions if needed\n        paginatedTransactionsUtils.invalidateData();\n        await loadAllTransactions();\n      } else {\n        // Invalidate paginated transactions when filtering by employee\n        paginatedTransactionsUtils.invalidateData();\n        await transactionsByEmployeeUtils.fetchById(employeeId);\n      }\n    } catch (error) {\n      console.error(\"Error loading transactions by employee:\", error);\n    } finally {\n      setIsEmployeeLoading(false);\n    }\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils, loadAllTransactions]); // Initial load of transactions\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading || isEmployeeLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          }\n\n          await loadTransactionsByEmployee(newValue.id);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions,\n          setTransactionApproval: setTransactionApproval\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), transactions !== null && !transactionsByEmployee && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading || isLoading,\n          onClick: async () => {\n            await loadAllTransactions();\n          },\n          children: paginatedTransactionsUtils.loading ? \"Loading...\" : \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"HvoGAi7+ilPDatOMzrvwIghf8cg=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","isEmployeeLoading","setIsEmployeeLoading","transactions","loadAllTransactions","invalidateData","loading","fetchAll","error","console","setTransactionApproval","transactionId","newValue","updatedTransactions","map","transaction","id","approved","setData","fetchWithoutCache","value","loadTransactionsByEmployee","employeeId","fetchById","item","label","firstName","lastName"],"sources":["C:/Users/Elta/Desktop/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["// App.tsx\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee, Transaction, SetTransactionApprovalParams } from \"./utils/types\"\nimport { SetTransactionApprovalFunction } from \"./components/Transactions/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  \n  const [isLoading, setIsLoading] = useState(false)\n  const [isEmployeeLoading, setIsEmployeeLoading] = useState(false)\n\n  // Combine paginated and filtered transactions appropriately\n  const transactions = useMemo(() => {\n    if (transactionsByEmployee !== null) {\n      return transactionsByEmployee\n    }\n    return paginatedTransactions?.data ?? null\n  }, [paginatedTransactions, transactionsByEmployee])\n\n  // Improved loadAllTransactions function\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n\n    try {\n      // Invalidate transactions filtered by employee to ensure fresh data\n      transactionsByEmployeeUtils.invalidateData()\n\n      // Fetch all employees if they haven't been loaded yet\n      if (employees === null && !employeeUtils.loading) {\n        await employeeUtils.fetchAll()\n      }\n\n      // Fetch all paginated transactions\n      await paginatedTransactionsUtils.fetchAll()\n    } catch (error) {\n      console.error(\"Error loading all transactions:\", error)\n      // Optionally, set an error state here to display an error message to users\n      // setError(\"Failed to load transactions. Please try again.\")\n    } finally {\n      setIsLoading(false)\n    }\n  }, [\n    employeeUtils,\n    paginatedTransactionsUtils,\n    transactionsByEmployeeUtils,\n    employees,\n  ])\n\n  // Improved setTransactionApproval function\n  const setTransactionApproval = useCallback<SetTransactionApprovalFunction>(\n    async ({ transactionId, newValue }) => {\n      try {\n        // Optimistically update the transaction in local state\n        if (transactions) {\n          const updatedTransactions = transactions.map((transaction) =>\n            transaction.id === transactionId\n              ? { ...transaction, approved: newValue }\n              : transaction\n          )\n\n          // Update the state depending on whether we're viewing all transactions or filtered by employee\n          if (transactionsByEmployee !== null) {\n            transactionsByEmployeeUtils.setData(updatedTransactions)\n          } else {\n            paginatedTransactionsUtils.setData(updatedTransactions)\n          }\n        }\n\n        // Perform the simulated API call\n        await fetchWithoutCache<void, SetTransactionApprovalParams>(\"setTransactionApproval\", {\n          transactionId,\n          value: newValue,\n        })\n      } catch (error) {\n        console.error(\"Error setting transaction approval:\", error)\n        // Optionally, revert the optimistic update or notify the user of the failure\n      }\n    },\n    [\n      transactions,\n      transactionsByEmployee,\n      transactionsByEmployeeUtils,\n      paginatedTransactionsUtils,\n      fetchWithoutCache,\n    ]\n  )\n\n  // Function to load transactions filtered by a specific employee\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      setIsEmployeeLoading(true)\n      \n      try {\n        // If 'All Employees' is selected, load all transactions\n        if (employeeId === EMPTY_EMPLOYEE.id) {\n          // Reset paginated transactions if needed\n          paginatedTransactionsUtils.invalidateData()\n          await loadAllTransactions()\n        } else {\n          // Invalidate paginated transactions when filtering by employee\n          paginatedTransactionsUtils.invalidateData()\n          await transactionsByEmployeeUtils.fetchById(employeeId)\n        }\n      } catch (error) {\n        console.error(\"Error loading transactions by employee:\", error)\n      } finally {\n        setIsEmployeeLoading(false)\n      }\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils, loadAllTransactions]\n  )\n\n  // Initial load of transactions\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading || isEmployeeLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              return\n            }\n\n            await loadTransactionsByEmployee(newValue.id)\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions \n            transactions={transactions} \n            setTransactionApproval={setTransactionApproval} \n          />\n\n          {/* Show 'View More' button only when not filtering by employee and more transactions are available */}\n          {transactions !== null && !transactionsByEmployee && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading || isLoading}\n              onClick={async () => {\n                await loadAllTransactions()\n              }}\n            >\n              {paginatedTransactionsUtils.loading ? \"Loading...\" : \"View More\"}\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}